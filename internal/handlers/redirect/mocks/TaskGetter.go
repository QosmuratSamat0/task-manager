// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	model "task-manager/internal/model"

	mock "github.com/stretchr/testify/mock"
)

// TaskGetter is an autogenerated mock type for the TaskGetter type
type TaskGetter struct {
	mock.Mock
}

// Task provides a mock function with given fields: id
func (_m *TaskGetter) Task(id int) (model.Task, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Task")
	}

	var r0 model.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (model.Task, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) model.Task); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(model.Task)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewTaskGetter creates a new instance of TaskGetter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTaskGetter(t interface {
	mock.TestingT
	Cleanup(func())
}) *TaskGetter {
	mock := &TaskGetter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
