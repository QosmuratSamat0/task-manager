// Code moved from internal/handlers/save/mocks/TaskSaver.go
// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
    mock "github.com/stretchr/testify/mock"

    time "time"
)

// TaskSaver is an autogenerated mock type for the TaskSaver type
type TaskSaver struct {
    mock.Mock
}

// SaveTask provides a mock function with given fields: userID, title, description, status, priority, deadline
func (_m *TaskSaver) SaveTask(userID int64, title string, description string, status string, priority string, deadline time.Time) (int64, error) {
    ret := _m.Called(userID, title, description, status, priority, deadline)

    if len(ret) == 0 {
        panic("no return value specified for SaveTask")
    }

    var r0 int64
    var r1 error
    if rf, ok := ret.Get(0).(func(int64, string, string, string, string, time.Time) (int64, error)); ok {
        return rf(userID, title, description, status, priority, deadline)
    }
    if rf, ok := ret.Get(0).(func(int64, string, string, string, string, time.Time) int64); ok {
        r0 = rf(userID, title, description, status, priority, deadline)
    } else {
        r0 = ret.Get(0).(int64)
    }

    if rf, ok := ret.Get(1).(func(int64, string, string, string, string, time.Time) error); ok {
        r1 = rf(userID, title, description, status, priority, deadline)
    } else {
        r1 = ret.Error(1)
    }

    return r0, r1
}

// NewTaskSaver creates a new instance of TaskSaver. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTaskSaver(t interface {
    mock.TestingT
    Cleanup(func())
}) *TaskSaver {
    mock := &TaskSaver{}
    mock.Mock.Test(t)

    t.Cleanup(func() { mock.AssertExpectations(t) })

    return mock
}

